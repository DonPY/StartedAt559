//  559_FrontDisplay_Started2020
// Rev. 200229

// From A basic everyday NeoPixel strip test program.
// NEOPIXEL BEST PRACTICES for most reliable operation:
// - Add 1000 uF CAPACITOR between NeoPixel strip's + and - connections.
// - MINIMIZE WIRING LENGTH between microcontroller board and first pixel.
// - NeoPixel strip's DATA-IN should pass through a 300-500 OHM RESISTOR.
// - AVOID connecting NeoPixels on a LIVE CIRCUIT. If you must, ALWAYS
//   connect GROUND (-) first, then +, then data.
// - When using a 3.3V microcontroller with a 5V-powered NeoPixel strip,
//   a LOGIC-LEVEL CONVERTER on the data line is STRONGLY RECOMMENDED.
// (Skipping these may work OK on your workbench but can fail in the field)

#include <avr/pgmspace.h>

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1:
#define LED_PIN    6

// How many NeoPixels are attached to the Arduino?
// front light board is 20 across and 16 high
#define LED_COUNT (20*16)

// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);
// Argument 1 = Number of pixels in NeoPixel strip
// Argument 2 = Arduino pin number (most are valid)
// Argument 3 = Pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)

// resulting colors can't be stored?
// recheck if this can work
/*
static const uint32_t color_table[] = {
  strip.Color(0,   0,   0), //black
  strip.Color(255,   0,   0), // red
  strip.Color(0,   255,   0), // green
  strip.Color(0,   0,   255), // blue
  strip.Color(255,   255,   255), // yellow
  strip.Color(255,   0,   255), // purple
  strip.Color(0,255,255), // Cyan / aqua
  strip.Color(128,128,0), // Olive  
  strip.Color(255,   255,   255) // white
};
*/
#define C_BLACK   0
#define C_RED     1
#define C_GREEN   2
#define C_BLUE    3

#define C_BL      0
#define C_WH      9

#define COLOR_COUNT (16)

const  uint8_t color_table[][3] = {
  {0,   0,   0}, //black
  {255,   0,   0}, // red
  {0,   255,   0}, // green
  {0,   0,   255}, // blue
  {255,   255,   0}, // yellow
  {255,   0,   255}, // purple
  {0,255,255}, // Cyan / aqua
  {101,67,33}, // brown
  {128,128,0}, // Olive  
  {255,   255,   255}, // white
  {100,100,100},  //  gray2
  {200,200,200}, // Gray1
  {200,200,200}, // Gray4
  {125,125,125}, // Gray3
  {250,   0,   250}, // purple  
  {200,   0,   200} // purple  
};

#define MAX_HEART_COLOR (6)
const  uint8_t heart_color_table[][3] = {
  {100,   0,   0}, //lt red
  {255,   0,   0}, // red
  {0,   0,   255}, // blue
  {255,   0,   255}, // purple
  {0,255,255}, // Cyan / aqua
  {250,   0,   250}, // purple  
  {200,   0,   200} // purple  
};


// #define FRAME_REPEATS 2

/*
const char frame_repeat[FRAME_REPEATS][3] = {
   {0,1,10},
   {2,3,10}
};
*/

//foreground
#define TOTAL_FORE_FRAMES (0)
//#define TOTAL_FORE_FRAMES (1)
// squint and you can see the 2020
const char foreground_frames[][16][20] PROGMEM = {
//0
  {
    {0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 9, 0, 9, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 9, 9, 9, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 9, 0, 9, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  }
};


// Here are the middle frames
#define HEARTBEAT_X   0
#define HEARTBEAT_Y   0
#define HEART_X (8)
#define HEART_Y (9)
#define HEART_SHADES (50)

#define HEART_FRAMES (1)
#define TOTAL_MID_FRAMES (HEART_FRAMES)
const char heart_frames[][16][20] PROGMEM = {
//0
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
    {0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
    {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
    {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
    {0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
};

//background

// Here are the fireworks frames
#define TOTAL_BACK_FRAMES 0
//#define TOTAL_BACK_FRAMES 17
//#define BACKGROUND_FRAMES 17
const char background_frames[][16][20] PROGMEM = {
//0
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
    {0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0},
    {0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  },
  {
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
    {0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0},
    {5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0},
    {5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0},
    {0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0},
    {0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  }
};

// 1, 3, 4, 5  suggested tree light colors
const char frames[][16][20] PROGMEM = {
//0
{
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,3,1,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,4,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,5,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,3,1,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,1,5,4,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,5,4,3,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,4,3,1,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,5,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,5,4,3,1,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,3,1,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
{
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,4,3,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,5,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,5,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,4,3,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,3,1,5,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,1,5,4,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,5,4,3,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,5,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,1,5,4,3,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,3,5,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
{
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,5,4,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,3,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,1,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,5,4,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,3,3,1,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,3,1,4,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,1,5,4,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,3,1,5,4,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,4,1,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
{
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,1,5,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,4,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,3,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,1,5,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,5,4,3,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,4,3,1,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,3,1,5,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,4,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,4,3,1,5,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,1,5,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,0,0,0,0,0}
  }
};

#define FIREWORK_COUNT 5
#define FIREWORK_DELAY -2
  static char fireworks[FIREWORK_COUNT][4] = {
    {FIREWORK_DELAY*0, 255, 255,1}, 
    {FIREWORK_DELAY*1, 255, 255,2}, 
    {FIREWORK_DELAY*2, 255, 255,3}, 
    {FIREWORK_DELAY*3, 255, 255,4}, 
    {FIREWORK_DELAY*4, 255, 255,5}, 
  };

#define HEART_COUNT (3)
#define HEART_DELAY -20
#define HEART_MAX_SIZE (8)
#define HEART_DIVIDE_SHIFT (4)
//#define HEART_DIVIDE_SHIFT (4)
  static char hearts[][6] = {
    // delay, x, y, color, size_step, direction (1,-1)
    {HEART_DELAY*0, 255, 255,1,0,1}, 
    {HEART_DELAY*1, 255, 255,2,0,1}, 
    {HEART_DELAY*2, 255, 255,3,0,1}, 
    {HEART_DELAY*3, 255, 255,4,0,1}, 
    {HEART_DELAY*4, 255, 255,5,0,1}, 
    {HEART_DELAY*5, 255, 255,6,0,1}, 
    {HEART_DELAY*6, 255, 255,7,0,1}, 
    {HEART_DELAY*7, 255, 255,8,0,1}, 
    {HEART_DELAY*8, 255, 255,9,0,1}, 
    {HEART_DELAY*9, 255, 255,10,0,1}, 
  };

// setup() function -- runs once at startup --------------------------------
void setup() {
  pinMode(LED_BUILTIN, OUTPUT);

   // Open serial communications and wait for port to open:
  Serial.begin(57600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  Serial.println("LED Controller started");

  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  // END of Trinket-specific code.

  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP


  strip.setBrightness(10);   
  // 5 was used before valentines day brightness increased for more reds...
  //strip.setBrightness(5); 
  //strip.setBrightness(20); // Set BRIGHTNESS to about 1/5 (max = 255)
}

#define COLOR_DELAY 10

// loop() function -- runs repeatedly as long as board is on ---------------

/*
void pixelTranslate(int x, int y, uint32_t color) {
  strip.setPixelColor(pix,strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));  
}
*/

void loop() {
  //Serial.println("Loop marker");

  static int heart = 0;
  //static int cur_frame_repeat =0;
  static int cur_back_frame = 0;
  static int cur_mid_frame = 0;
  static int cur_fore_frame = 0;
  static char color_num;
  static int c_x, c_y;
  static int calc_x = 0, calc_y=0;
  // this is for valentines day and not to be confused with the heart for heartbeat
  static int heart_size =0;

  digitalWrite(LED_BUILTIN, heart);
  heart++;
  if(heart==0) {
    strip.setPixelColor((HEARTBEAT_Y*16)+HEARTBEAT_X,strip.Color(255,0,0));     
  } else if (heart==1) {
    strip.setPixelColor((HEARTBEAT_Y*16)+HEARTBEAT_X,strip.Color(0,255,0));
  } else {
    heart =-1;
    strip.setPixelColor((HEARTBEAT_Y*16)+HEARTBEAT_X,strip.Color(0,0,255));
  }
  strip.show(); 

  delay(300);
  // delay before 2020 Valentines
  //delay(250);

  // clear
  for(int each_pix=0;each_pix<(20*16);each_pix++) {
    strip.setPixelColor((each_pix),strip.Color(0,0,0));                    
  }

  // background
  // a pragma could be used here but is is seeing home many sections 
  // the arduino can support code size-wise
  if (TOTAL_BACK_FRAMES >0) {
    for(int each_firework=0;each_firework< FIREWORK_COUNT; each_firework++) {
      fireworks[each_firework][0]++;
  
      if(fireworks[each_firework][0] > 0) {
        // TOTAL_BACK_FRAMES
        
        if(fireworks[each_firework][0]>=TOTAL_BACK_FRAMES) {
          fireworks[each_firework][0] = 0;
    
          // set new
          fireworks[each_firework][1] = random(-8,11);
          fireworks[each_firework][2] = random(-8,7);
          fireworks[each_firework][3] = random(1,8);
        }      
      
        for(int pix_x=0; pix_x<20;pix_x++) {
          for(int pix_y=0; pix_y<16;pix_y++) {
            calc_x = pix_x + fireworks[each_firework][1];
            calc_y = pix_y + fireworks[each_firework][2];
    
            if(calc_x >=0 && calc_y >=0 && calc_x <20 && calc_y <16) {
              //color_num = frames[cur_frame][15- pix_y][pix_x];
              //color_num = frames[cur_frame][15- pix_y][pix_x];
              memcpy_P(&color_num,&background_frames[fireworks[each_firework][0]][15- calc_y][calc_x],1);
              //strcpy_P(color_num, (char *)pgm_read_word(frames[cur_frame][15- pix_y][pix_x]) );
              if(color_num <=0 || color_num >=COLOR_COUNT) {
              } else {
                color_num = fireworks[each_firework][3];
                //strip.setPixelColor(pix,strip.Color(255,0,0));
                //pixelTranslate()
                if(pix_y & 1 == 1) {
                  strip.setPixelColor((pix_y*20+pix_x),strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));                    
                } else {
                  strip.setPixelColor((pix_y*20+(19-pix_x)),strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));          
                }
              }
              //strip.setPixelColor(pix,strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));
            }
          }
        }
      }
    }
  
    cur_back_frame++;
    if (cur_back_frame>=TOTAL_BACK_FRAMES) {
      cur_back_frame =0;
    }
  } // firework background

  // middle frame
  // expanding / contracting code
  // first used for 2020 valentines day
  // a pragma could be used here but is is seeing home many sections 
  // the arduino can support code size-wise
  if (HEART_FRAMES >0) {
    for(char each_size=HEART_MAX_SIZE; each_size>=0; each_size--) {
      for(char each_heart=0;each_heart< HEART_COUNT; each_heart++) {
        if(hearts[each_heart][4] == each_size) {
          hearts[each_heart][0]++;
      
          if(hearts[each_heart][0] > 0) {
            if(hearts[each_heart][4] <=0 & hearts[each_heart][5] <=-1) {  
              if(hearts[each_heart][0]>=HEART_FRAMES) {
                hearts[each_heart][0] = 0;
          
                // set new
                //x
                hearts[each_heart][1] = random(-HEART_X,20-HEART_X);
                //hearts[each_heart][1] = random(-8,11);
                //y
                hearts[each_heart][2] = random(-HEART_Y,16-HEART_Y);
                //hearts[each_heart][2] = random(-8,7);
                // color (shade)
                //hearts[each_heart][3] = random(1,MAX_HEART_COLOR);
                // size
                hearts[each_heart][4] = 0;
                // direction (1 is increasing)
                hearts[each_heart][5] = 1;
              }
            } else {
              hearts[each_heart][4] = hearts[each_heart][4] + hearts[each_heart][5];
              if (hearts[each_heart][4] >= HEART_MAX_SIZE) {
                hearts[each_heart][4] = HEART_MAX_SIZE;
                hearts[each_heart][5] = -abs(hearts[each_heart][5]);
              }
            }
          
            for(int pix_x=0; pix_x<20;pix_x++) {
              for(int pix_y=0; pix_y<16;pix_y++) {
    
                // this is the mapping of what image pixel is for the display pixel
                //heart_size = 1;
                heart_size = hearts[each_heart][4];
    
                //calc_x = pix_x + (hearts[each_heart][1] + HEART_X) - ((heart_size * HEART_X)/20);
                //calc_y = pix_y + (hearts[each_heart][2] + HEART_Y) - ((heart_size * HEART_Y)/20);
    //            calc_x = pix_x + hearts[each_heart][1];
    //            calc_y = pix_y + hearts[each_heart][2];
                c_x = pix_x + hearts[each_heart][1];
                c_y = pix_y + hearts[each_heart][2];
                //calc_x = c_x;
                //calc_y = c_y;
                //calc_x = (((c_x - HEART_X) * heart_size) /2 ) + HEART_X;
                //calc_y = (((c_y - HEART_Y) * heart_size) /2 ) + HEART_Y;
                calc_x = (((c_x - HEART_X) * heart_size) ) + HEART_X;
                calc_y = (((c_y - HEART_Y) * heart_size) ) + HEART_Y;
        
                if(calc_x >=0 && calc_y >=0 && calc_x <20 && calc_y <16) {
                  //color_num = frames[cur_frame][15- pix_y][pix_x];
                  //color_num = frames[cur_frame][15- pix_y][pix_x];
                  memcpy_P(&color_num,&heart_frames[0][15- calc_y][calc_x],1);
                  //strcpy_P(color_num, (char *)pgm_read_word(frames[cur_frame][15- pix_y][pix_x]) );
                  if(color_num <=0 || color_num >=MAX_HEART_COLOR) {
                    // blank, so see through
                  } else {
                    color_num = hearts[each_heart][3];
                    //strip.setPixelColor(pix,strip.Color(255,0,0));
                    //pixelTranslate()
                    if(pix_y & 1 == 1) {
                      strip.setPixelColor((pix_y*20+pix_x),strip.Color(heart_color_table[color_num][0],heart_color_table[color_num][1],heart_color_table[color_num][2]));                    
                    } else {
                      strip.setPixelColor((pix_y*20+(19-pix_x)),strip.Color(heart_color_table[color_num][0],heart_color_table[color_num][1],heart_color_table[color_num][2]));          
                    }
                  }
                  //strip.setPixelColor(pix,strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));
                }
              }
            }
          }
        }
      }
    }
  
    cur_mid_frame++;
    if (cur_mid_frame>=TOTAL_MID_FRAMES) {
      cur_mid_frame =0;
    }
  } // middle frame hearts




  // foreground
  if (TOTAL_FORE_FRAMES >0) { 
    for(int pix_x=0; pix_x<20;pix_x++) {
      for(int pix_y=0; pix_y<16;pix_y++) {
        //color_num = frames[cur_frame][15- pix_y][pix_x];
        //color_num = frames[cur_frame][15- pix_y][pix_x];
        memcpy_P(&color_num,&foreground_frames[cur_fore_frame][15- pix_y][pix_x],1);
        //strcpy_P(color_num, (char *)pgm_read_word(frames[cur_frame][15- pix_y][pix_x]) );
        if(color_num <=0 || color_num >=COLOR_COUNT) {
          
        } else {
          //strip.setPixelColor(pix,strip.Color(255,0,0));
          //pixelTranslate()
          if(pix_y & 1 == 1) {
            strip.setPixelColor((pix_y*20+pix_x),strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));                    
          } else {
            strip.setPixelColor((pix_y*20+(19-pix_x)),strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));          
          }
        }
        //strip.setPixelColor(pix,strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));
      }
    }
  
    cur_fore_frame++;
    if (cur_fore_frame>=TOTAL_FORE_FRAMES) {
      cur_fore_frame =0;
    }
  } // if foreground frame(s) 


  // daBounce();

/*
  for(each_color=0; each_color<=9; each_color++) {  
    //colorWipe(color_table[each_color], 20); // Blue
    colorWipe( strip.Color(color_table[each_color][0],color_table[each_color][1],color_table[each_color][2]), 5 );
  }
*/
  //strip.setPixelColor(20,strip.Color(255,0,0));
  //strip.show();
  //delay(100);

  //animateFrames(1,500);
/*
  int color_num =0;
//  for(int f_c=0; f_c<frame_count; f_c++) {

    for(uint16_t pix=0; pix<strip.numPixels();pix++) {
//    for(int pixel=0; pixel<(19*15);pixel++) {
        color_num = frames[0][pix];
        //Serial.print(pix);
        //Serial.print(")");
        Serial.print(color_num);
          Serial.print("-");
        if(color_num <1 || color_num >8) {
          color_num = 3;
        }
        //Serial.print(color_num);
        //color_num = frames[f_c][pixel];
        strip.setPixelColor(pix,strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));
        //strip.setPixelColor(pixel,color_table[color_num]);
        
        //strip.show();
        //delay(30);
    }
    Serial.println("");

    strip.show();
    delay(500);

*/

  
  // Fill along the length of the strip in various colors...
  //colorWipe(strip.Color(255,   0,   0), 10); // Red
  //colorWipe(strip.Color(  0, 255,   0), 50); // Green
  //colorWipe(strip.Color(  0,   0, 255), 50); // Blue

  // Do a theater marquee effect in various colors...
  //theaterChase(strip.Color(127, 127, 127), 50); // White, half brightness
  //theaterChase(strip.Color(127,   0,   0), 50); // Red, half brightness
  //theaterChase(strip.Color(  0,   0, 127), 50); // Blue, half brightness

  //rainbow(10);             // Flowing rainbow cycle along the whole strip
  //theaterChaseRainbow(50); // Rainbow-enhanced theaterChase variant


}

void daBounce(void)
{
  static int each_color =1;
  static int color_change_delay =COLOR_DELAY;
  static int x = 0, y=0;
  static int dx = 1, dy = 1;
  
  if(y & 1) {
     strip.setPixelColor((x+ (y*20)),strip.Color(color_table[each_color][0],color_table[each_color][1],color_table[each_color][2]));  
  } else {
    strip.setPixelColor(((19 - x) + (y*20)),strip.Color(color_table[each_color][0],color_table[each_color][1],color_table[each_color][2]));
  }
  //strip.setPixelColor((x+ (y*20)),color_table[each_color][0],color_table[each_color][1],color_table[each_color][2]);
  //strip.setPixelColor((x+ (y*19)),strip.Color(0,255,0));
  //serial.println(
 
  strip.show();

  if (color_change_delay<=0) {
    each_color++;
    color_change_delay = COLOR_DELAY;
  } else {
    color_change_delay--;
  }
  if(each_color>=9) {
    each_color =1;
  }

  if (x <=0) {
    dx  =1;
  } else if (x>=19) {
    dx = -1;
  }
  if (y <=0) {
    dy = 1;
  } else if (y>=15) {
    dy = -1;
  }

  x += dx;
  y += dy;
}

/*
void animateFrames(int frame_count, int wait)
{
  int color_num =0;
//  for(int f_c=0; f_c<frame_count; f_c++) {

    for(int pix=0; pix<strip.numPixels();pix++) {
//    for(int pixel=0; pixel<(19*15);pixel++) {
        color_num = frames[0][pix];
        if(color_num <0 || color_num >8) {
          color_num = 3;
        }
        //color_num = frames[f_c][pixel];
        strip.setPixelColor(pix,strip.Color(color_table[color_num][0],color_table[color_num][1],color_table[color_num][2]));
        //strip.setPixelColor(pixel,color_table[color_num]);
        
        //strip.show();
        //delay(30);
    }

    strip.show();
    delay(wait);
//  }
}
*/
// Some functions of our own for creating animated effects -----------------

// Fill strip pixels one after another with a color. Strip is NOT cleared
// first; anything there will be covered pixel by pixel. Pass in color
// (as a single 'packed' 32-bit value, which you can get by calling
// strip.Color(red, green, blue) as shown in the loop() function above),
// and a delay time (in milliseconds) between pixels.
void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}

/*

// Theater-marquee-style chasing lights. Pass in a color (32-bit value,
// a la strip.Color(r,g,b) as mentioned above), and a delay time (in ms)
// between frames.
void theaterChase(uint32_t color, int wait) {
  for(int a=0; a<10; a++) {  // Repeat 10 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in steps of 3...
      for(int c=b; c<strip.numPixels(); c += 3) {
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show(); // Update strip with new contents
      delay(wait);  // Pause for a moment
    }
  }
}

// Rainbow cycle along whole strip. Pass delay time (in ms) between frames.
void rainbow(int wait) {
  // Hue of first pixel runs 5 complete loops through the color wheel.
  // Color wheel has a range of 65536 but it's OK if we roll over, so
  // just count from 0 to 5*65536. Adding 256 to firstPixelHue each time
  // means we'll make 5*65536/256 = 1280 passes through this outer loop:
  for(long firstPixelHue = 0; firstPixelHue < 5*65536; firstPixelHue += 256) {
    for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
      // Offset pixel hue by an amount to make one full revolution of the
      // color wheel (range of 65536) along the length of the strip
      // (strip.numPixels() steps):
      int pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());
      // strip.ColorHSV() can take 1 or 3 arguments: a hue (0 to 65535) or
      // optionally add saturation and value (brightness) (each 0 to 255).
      // Here we're using just the single-argument hue variant. The result
      // is passed through strip.gamma32() to provide 'truer' colors
      // before assigning to each pixel:
      strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));
    }
    strip.show(); // Update strip with new contents
    delay(wait);  // Pause for a moment
  }
}

// Rainbow-enhanced theater marquee. Pass delay time (in ms) between frames.
void theaterChaseRainbow(int wait) {
  int firstPixelHue = 0;     // First pixel starts at red (hue 0)
  for(int a=0; a<30; a++) {  // Repeat 30 times...
    for(int b=0; b<3; b++) { //  'b' counts from 0 to 2...
      strip.clear();         //   Set all pixels in RAM to 0 (off)
      // 'c' counts up from 'b' to end of strip in increments of 3...
      for(int c=b; c<strip.numPixels(); c += 3) {
        // hue of pixel 'c' is offset by an amount to make one full
        // revolution of the color wheel (range 65536) along the length
        // of the strip (strip.numPixels() steps):
        int      hue   = firstPixelHue + c * 65536L / strip.numPixels();
        uint32_t color = strip.gamma32(strip.ColorHSV(hue)); // hue -> RGB
        strip.setPixelColor(c, color); // Set pixel 'c' to value 'color'
      }
      strip.show();                // Update strip with new contents
      delay(wait);                 // Pause for a moment
      firstPixelHue += 65536 / 90; // One cycle of color wheel over 90 frames
    }
  }
}

*/
